# Authentik服务及相关附属服务 Docker Compose配置文件
# version: '3.9' # Docker Compose 文件版本

services:
  postgresql: # PostgreSQL 服务配置
    image: postgres:16-alpine # PostgreSQL官方轻量镜像
    restart: unless-stopped # 容器异常退出后自动重启
    mem_limit: 512m # 限制最大内存使用量为512MB
    cpus: 0.5 # 限制最大CPU使用量为0.5个核心
    healthcheck: # 容器健康检查配置
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"] # 检查PostgreSQL服务是否可用
      start_period: 20s  # 健康检查开始前的等待时间
      interval: 60s # 每60秒检查一次
      retries: 5 # 最大失败重试次数为5次
      timeout: 5s # 超时时间为5秒
    volumes:
      - authentik_postgres:/var/lib/postgresql/data # 使用指定数据卷进行持久化存储
    environment:
      POSTGRES_PASSWORD: ${PG_PASS} # PostgreSQL数据库密码
      POSTGRES_USER: ${PG_USER:-authentik} # PostgreSQL数据库用户名
      POSTGRES_DB: ${PG_DB:-authentik} # PostgreSQL数据库名称
    networks:
      - authentik_network # 加入 authentik_network Docker网络，与Authentik服务通信
    env_file:
      - .env


  redis: # redis服务配置
    image: redis:7.4.2-alpine # redis官方轻量镜像
    command: --save 300 10 --maxmemory 64mb --maxmemory-policy allkeys-lru # Redis配置:每5分钟或每10次写入保存一次快照, 最大内存64mb, 使用 LRU 缓存策略
    restart: unless-stopped # 容器异常退出后自动重启
    mem_limit: 128m # 限制最大内存使用量为128MB
    cpus: 0.25 # 限制最大CPU使用量为0.25个核心
    healthcheck: # 容器健康检查配置
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s # 健康检查开始前的等待时间
      interval: 30s # 每30秒检查一次
      retries: 5 # 最大失败重试次数为5次
      timeout: 3s # 超时时间为3秒
    volumes:
      - authentik_redis:/data # 使用指定数据卷进行持久化存储
    networks:
      - authentik_network


  server: # Authentik主服务配置
    image: ghcr.io/goauthentik/server:2025.2.4 # Authentik官方镜像
    restart: unless-stopped
    command: server # 启动authentik主服务(web UI + API)
    mem_limit: 1024m
    cpus: 1.0
    ports:
      - "9000:9000" # 映射宿主机9000端口到容器9000端口
      # - "9443:9443" # 映射宿主机9443端口到容器9443端口
    volumes:
      - authentik_media:/media # 持久化用户上传数据
      - authentik_custom_config:/config # 存储自定义配置(如模板)
    environment:
      AUTHENTIK_REDIS__HOST: redis # Redis服务主机名
      AUTHENTIK_POSTGRESQL__HOST: postgresql # PostgreSQL服务主机名
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik} # PostgreSQL数据库用户名
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik} # PostgreSQL数据库名称
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS} # PostgreSQL数据库密码
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY} # Authentik密钥
    depends_on:
      - postgresql # 依赖PostgreSQL服务
      - redis # 依赖Redis服务
    networks:
      - authentik_network
    healthcheck: # 容器健康检查配置
      test: ["CMD-SHELL", "echo 'OK'"]
      interval: 30s # 检查间隔
      timeout: 10s # 超时时长
      retries: 5 # 最大重试次数
      start_period: 20s # 开始前等待时间
    env_file:
      - .env


  worker: # Authentik工作进程配置
    image: ghcr.io/goauthentik/server:2025.2.4  # 使用 Authentik Worker 镜像
    restart: unless-stopped
    command: worker # 启动 Authentik 工作进程
    mem_limit: 512m
    cpus: 0.5
    user: root # root权限运行，用于修复挂载目录权限（非必须）
    volumes:
      - authentik_media:/media
      - authentik_custom_config:/config
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
    depends_on:
      - postgresql
      - redis
    networks:
      - authentik_network
    healthcheck: # 容器健康检查配置
      test: ["CMD-SHELL", "echo 'OK'"]
      interval: 30s # 检查间隔
      timeout: 10s # 超时时长
      retries: 5 # 最大重试次数
      start_period: 20s # 开始前等待时间
    env_file:
      - .env

volumes:
  authentik_postgres: # postgresql数据卷
    external: true # 使用外部数据卷
  authentik_redis: # redis数据卷
    external: true 
  authentik_media: # Authentik媒体数据卷
    external: true
  authentik_custom_config: # Authentik自定义配置模板数据卷
    external: true

networks:
  authentik_network: # 自定义Docker网络(已存在)
    external: true